// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  job: (where?: JobWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  job: (where: JobWhereUniqueInput) => JobNullablePromise;
  jobs: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Job>;
  jobsConnection: (args?: {
    where?: JobWhereInput;
    orderBy?: JobOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createJob: (data: JobCreateInput) => JobPromise;
  updateJob: (args: {
    data: JobUpdateInput;
    where: JobWhereUniqueInput;
  }) => JobPromise;
  updateManyJobs: (args: {
    data: JobUpdateManyMutationInput;
    where?: JobWhereInput;
  }) => BatchPayloadPromise;
  upsertJob: (args: {
    where: JobWhereUniqueInput;
    create: JobCreateInput;
    update: JobUpdateInput;
  }) => JobPromise;
  deleteJob: (where: JobWhereUniqueInput) => JobPromise;
  deleteManyJobs: (where?: JobWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: {
    data: TaskUpdateInput;
    where: TaskWhereUniqueInput;
  }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  job: (
    where?: JobSubscriptionWhereInput
  ) => JobSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type ProjectStatus = "PENDING" | "ACTIVE" | "COMPLETED" | "DELETED";

export type ProjectType = "MULTI_CLASS" | "BINARY";

export type JobOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "projectId_ASC"
  | "projectId_DESC"
  | "startDateTime_ASC"
  | "startDateTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "endDateTime_ASC"
  | "endDateTime_DESC"
  | "description_ASC"
  | "description_DESC"
  | "validation_ASC"
  | "validation_DESC"
  | "bucketName_ASC"
  | "bucketName_DESC"
  | "category_ASC"
  | "category_DESC"
  | "type_ASC"
  | "type_DESC"
  | "repeatable_ASC"
  | "repeatable_DESC"
  | "question_ASC"
  | "question_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "expectedSubmissions_ASC"
  | "expectedSubmissions_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "validation_ASC"
  | "validation_DESC"
  | "bucketName_ASC"
  | "bucketName_DESC"
  | "category_ASC"
  | "category_DESC"
  | "type_ASC"
  | "type_DESC"
  | "repeatable_ASC"
  | "repeatable_DESC"
  | "question_ASC"
  | "question_DESC"
  | "width_ASC"
  | "width_DESC"
  | "height_ASC"
  | "height_DESC"
  | "status_ASC"
  | "status_DESC"
  | "currentJobId_ASC"
  | "currentJobId_DESC";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "jobId_ASC"
  | "jobId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "fileId_ASC"
  | "fileId_DESC"
  | "jobIdAndFileId_ASC"
  | "jobIdAndFileId_DESC"
  | "type_ASC"
  | "type_DESC"
  | "labels_ASC"
  | "labels_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export type JobWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface JobWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  projectId?: Maybe<String>;
  projectId_not?: Maybe<String>;
  projectId_in?: Maybe<String[] | String>;
  projectId_not_in?: Maybe<String[] | String>;
  projectId_lt?: Maybe<String>;
  projectId_lte?: Maybe<String>;
  projectId_gt?: Maybe<String>;
  projectId_gte?: Maybe<String>;
  projectId_contains?: Maybe<String>;
  projectId_not_contains?: Maybe<String>;
  projectId_starts_with?: Maybe<String>;
  projectId_not_starts_with?: Maybe<String>;
  projectId_ends_with?: Maybe<String>;
  projectId_not_ends_with?: Maybe<String>;
  startDateTime?: Maybe<DateTimeInput>;
  startDateTime_not?: Maybe<DateTimeInput>;
  startDateTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDateTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDateTime_lt?: Maybe<DateTimeInput>;
  startDateTime_lte?: Maybe<DateTimeInput>;
  startDateTime_gt?: Maybe<DateTimeInput>;
  startDateTime_gte?: Maybe<DateTimeInput>;
  status?: Maybe<ProjectStatus>;
  status_not?: Maybe<ProjectStatus>;
  status_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  status_not_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  endDateTime?: Maybe<DateTimeInput>;
  endDateTime_not?: Maybe<DateTimeInput>;
  endDateTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDateTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endDateTime_lt?: Maybe<DateTimeInput>;
  endDateTime_lte?: Maybe<DateTimeInput>;
  endDateTime_gt?: Maybe<DateTimeInput>;
  endDateTime_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  validation?: Maybe<Int>;
  validation_not?: Maybe<Int>;
  validation_in?: Maybe<Int[] | Int>;
  validation_not_in?: Maybe<Int[] | Int>;
  validation_lt?: Maybe<Int>;
  validation_lte?: Maybe<Int>;
  validation_gt?: Maybe<Int>;
  validation_gte?: Maybe<Int>;
  bucketName?: Maybe<String>;
  bucketName_not?: Maybe<String>;
  bucketName_in?: Maybe<String[] | String>;
  bucketName_not_in?: Maybe<String[] | String>;
  bucketName_lt?: Maybe<String>;
  bucketName_lte?: Maybe<String>;
  bucketName_gt?: Maybe<String>;
  bucketName_gte?: Maybe<String>;
  bucketName_contains?: Maybe<String>;
  bucketName_not_contains?: Maybe<String>;
  bucketName_starts_with?: Maybe<String>;
  bucketName_not_starts_with?: Maybe<String>;
  bucketName_ends_with?: Maybe<String>;
  bucketName_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<ProjectType>;
  type_not?: Maybe<ProjectType>;
  type_in?: Maybe<ProjectType[] | ProjectType>;
  type_not_in?: Maybe<ProjectType[] | ProjectType>;
  repeatable?: Maybe<Boolean>;
  repeatable_not?: Maybe<Boolean>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  expectedSubmissions?: Maybe<Int>;
  expectedSubmissions_not?: Maybe<Int>;
  expectedSubmissions_in?: Maybe<Int[] | Int>;
  expectedSubmissions_not_in?: Maybe<Int[] | Int>;
  expectedSubmissions_lt?: Maybe<Int>;
  expectedSubmissions_lte?: Maybe<Int>;
  expectedSubmissions_gt?: Maybe<Int>;
  expectedSubmissions_gte?: Maybe<Int>;
  AND?: Maybe<JobWhereInput[] | JobWhereInput>;
  OR?: Maybe<JobWhereInput[] | JobWhereInput>;
  NOT?: Maybe<JobWhereInput[] | JobWhereInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  validation?: Maybe<Int>;
  validation_not?: Maybe<Int>;
  validation_in?: Maybe<Int[] | Int>;
  validation_not_in?: Maybe<Int[] | Int>;
  validation_lt?: Maybe<Int>;
  validation_lte?: Maybe<Int>;
  validation_gt?: Maybe<Int>;
  validation_gte?: Maybe<Int>;
  bucketName?: Maybe<String>;
  bucketName_not?: Maybe<String>;
  bucketName_in?: Maybe<String[] | String>;
  bucketName_not_in?: Maybe<String[] | String>;
  bucketName_lt?: Maybe<String>;
  bucketName_lte?: Maybe<String>;
  bucketName_gt?: Maybe<String>;
  bucketName_gte?: Maybe<String>;
  bucketName_contains?: Maybe<String>;
  bucketName_not_contains?: Maybe<String>;
  bucketName_starts_with?: Maybe<String>;
  bucketName_not_starts_with?: Maybe<String>;
  bucketName_ends_with?: Maybe<String>;
  bucketName_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  type?: Maybe<ProjectType>;
  type_not?: Maybe<ProjectType>;
  type_in?: Maybe<ProjectType[] | ProjectType>;
  type_not_in?: Maybe<ProjectType[] | ProjectType>;
  repeatable?: Maybe<Boolean>;
  repeatable_not?: Maybe<Boolean>;
  question?: Maybe<String>;
  question_not?: Maybe<String>;
  question_in?: Maybe<String[] | String>;
  question_not_in?: Maybe<String[] | String>;
  question_lt?: Maybe<String>;
  question_lte?: Maybe<String>;
  question_gt?: Maybe<String>;
  question_gte?: Maybe<String>;
  question_contains?: Maybe<String>;
  question_not_contains?: Maybe<String>;
  question_starts_with?: Maybe<String>;
  question_not_starts_with?: Maybe<String>;
  question_ends_with?: Maybe<String>;
  question_not_ends_with?: Maybe<String>;
  width?: Maybe<Int>;
  width_not?: Maybe<Int>;
  width_in?: Maybe<Int[] | Int>;
  width_not_in?: Maybe<Int[] | Int>;
  width_lt?: Maybe<Int>;
  width_lte?: Maybe<Int>;
  width_gt?: Maybe<Int>;
  width_gte?: Maybe<Int>;
  height?: Maybe<Int>;
  height_not?: Maybe<Int>;
  height_in?: Maybe<Int[] | Int>;
  height_not_in?: Maybe<Int[] | Int>;
  height_lt?: Maybe<Int>;
  height_lte?: Maybe<Int>;
  height_gt?: Maybe<Int>;
  height_gte?: Maybe<Int>;
  status?: Maybe<ProjectStatus>;
  status_not?: Maybe<ProjectStatus>;
  status_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  status_not_in?: Maybe<ProjectStatus[] | ProjectStatus>;
  currentJobId?: Maybe<String>;
  currentJobId_not?: Maybe<String>;
  currentJobId_in?: Maybe<String[] | String>;
  currentJobId_not_in?: Maybe<String[] | String>;
  currentJobId_lt?: Maybe<String>;
  currentJobId_lte?: Maybe<String>;
  currentJobId_gt?: Maybe<String>;
  currentJobId_gte?: Maybe<String>;
  currentJobId_contains?: Maybe<String>;
  currentJobId_not_contains?: Maybe<String>;
  currentJobId_starts_with?: Maybe<String>;
  currentJobId_not_starts_with?: Maybe<String>;
  currentJobId_ends_with?: Maybe<String>;
  currentJobId_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaskWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  jobId?: Maybe<String>;
  jobId_not?: Maybe<String>;
  jobId_in?: Maybe<String[] | String>;
  jobId_not_in?: Maybe<String[] | String>;
  jobId_lt?: Maybe<String>;
  jobId_lte?: Maybe<String>;
  jobId_gt?: Maybe<String>;
  jobId_gte?: Maybe<String>;
  jobId_contains?: Maybe<String>;
  jobId_not_contains?: Maybe<String>;
  jobId_starts_with?: Maybe<String>;
  jobId_not_starts_with?: Maybe<String>;
  jobId_ends_with?: Maybe<String>;
  jobId_not_ends_with?: Maybe<String>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  fileId?: Maybe<String>;
  fileId_not?: Maybe<String>;
  fileId_in?: Maybe<String[] | String>;
  fileId_not_in?: Maybe<String[] | String>;
  fileId_lt?: Maybe<String>;
  fileId_lte?: Maybe<String>;
  fileId_gt?: Maybe<String>;
  fileId_gte?: Maybe<String>;
  fileId_contains?: Maybe<String>;
  fileId_not_contains?: Maybe<String>;
  fileId_starts_with?: Maybe<String>;
  fileId_not_starts_with?: Maybe<String>;
  fileId_ends_with?: Maybe<String>;
  fileId_not_ends_with?: Maybe<String>;
  jobIdAndFileId?: Maybe<String>;
  jobIdAndFileId_not?: Maybe<String>;
  jobIdAndFileId_in?: Maybe<String[] | String>;
  jobIdAndFileId_not_in?: Maybe<String[] | String>;
  jobIdAndFileId_lt?: Maybe<String>;
  jobIdAndFileId_lte?: Maybe<String>;
  jobIdAndFileId_gt?: Maybe<String>;
  jobIdAndFileId_gte?: Maybe<String>;
  jobIdAndFileId_contains?: Maybe<String>;
  jobIdAndFileId_not_contains?: Maybe<String>;
  jobIdAndFileId_starts_with?: Maybe<String>;
  jobIdAndFileId_not_starts_with?: Maybe<String>;
  jobIdAndFileId_ends_with?: Maybe<String>;
  jobIdAndFileId_not_ends_with?: Maybe<String>;
  type?: Maybe<ProjectType>;
  type_not?: Maybe<ProjectType>;
  type_in?: Maybe<ProjectType[] | ProjectType>;
  type_not_in?: Maybe<ProjectType[] | ProjectType>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface JobCreateInput {
  id?: Maybe<ID_Input>;
  projectId: String;
  status?: Maybe<ProjectStatus>;
  endDateTime?: Maybe<DateTimeInput>;
  fileIds?: Maybe<JobCreatefileIdsInput>;
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type: ProjectType;
  repeatable: Boolean;
  question: String;
  classes?: Maybe<JobCreateclassesInput>;
  width: Int;
  height: Int;
  expectedSubmissions?: Maybe<Int>;
}

export interface JobCreatefileIdsInput {
  set?: Maybe<String[] | String>;
}

export interface JobCreateclassesInput {
  set?: Maybe<String[] | String>;
}

export interface JobUpdateInput {
  projectId?: Maybe<String>;
  status?: Maybe<ProjectStatus>;
  endDateTime?: Maybe<DateTimeInput>;
  fileIds?: Maybe<JobUpdatefileIdsInput>;
  description?: Maybe<String>;
  validation?: Maybe<Int>;
  bucketName?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ProjectType>;
  repeatable?: Maybe<Boolean>;
  question?: Maybe<String>;
  classes?: Maybe<JobUpdateclassesInput>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  expectedSubmissions?: Maybe<Int>;
}

export interface JobUpdatefileIdsInput {
  set?: Maybe<String[] | String>;
}

export interface JobUpdateclassesInput {
  set?: Maybe<String[] | String>;
}

export interface JobUpdateManyMutationInput {
  projectId?: Maybe<String>;
  status?: Maybe<ProjectStatus>;
  endDateTime?: Maybe<DateTimeInput>;
  fileIds?: Maybe<JobUpdatefileIdsInput>;
  description?: Maybe<String>;
  validation?: Maybe<Int>;
  bucketName?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ProjectType>;
  repeatable?: Maybe<Boolean>;
  question?: Maybe<String>;
  classes?: Maybe<JobUpdateclassesInput>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  expectedSubmissions?: Maybe<Int>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneInput;
  name: String;
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type?: Maybe<ProjectType>;
  repeatable?: Maybe<Boolean>;
  question?: Maybe<String>;
  classes?: Maybe<ProjectCreateclassesInput>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  status?: Maybe<ProjectStatus>;
  currentJobId?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
}

export interface ProjectCreateclassesInput {
  set?: Maybe<String[] | String>;
}

export interface ProjectUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  validation?: Maybe<Int>;
  bucketName?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ProjectType>;
  repeatable?: Maybe<Boolean>;
  question?: Maybe<String>;
  classes?: Maybe<ProjectUpdateclassesInput>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  status?: Maybe<ProjectStatus>;
  currentJobId?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ProjectUpdateclassesInput {
  set?: Maybe<String[] | String>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  validation?: Maybe<Int>;
  bucketName?: Maybe<String>;
  category?: Maybe<String>;
  type?: Maybe<ProjectType>;
  repeatable?: Maybe<Boolean>;
  question?: Maybe<String>;
  classes?: Maybe<ProjectUpdateclassesInput>;
  width?: Maybe<Int>;
  height?: Maybe<Int>;
  status?: Maybe<ProjectStatus>;
  currentJobId?: Maybe<String>;
}

export interface TaskCreateInput {
  id?: Maybe<ID_Input>;
  jobId: String;
  userId: String;
  fileId: String;
  jobIdAndFileId: String;
  type?: Maybe<ProjectType>;
  labels?: Maybe<Json>;
}

export interface TaskUpdateInput {
  jobId?: Maybe<String>;
  userId?: Maybe<String>;
  fileId?: Maybe<String>;
  jobIdAndFileId?: Maybe<String>;
  type?: Maybe<ProjectType>;
  labels?: Maybe<Json>;
}

export interface TaskUpdateManyMutationInput {
  jobId?: Maybe<String>;
  userId?: Maybe<String>;
  fileId?: Maybe<String>;
  jobIdAndFileId?: Maybe<String>;
  type?: Maybe<ProjectType>;
  labels?: Maybe<Json>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface JobSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobWhereInput>;
  AND?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  OR?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
  NOT?: Maybe<JobSubscriptionWhereInput[] | JobSubscriptionWhereInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Category {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Job {
  id: ID_Output;
  projectId: String;
  startDateTime: DateTimeOutput;
  status?: ProjectStatus;
  endDateTime?: DateTimeOutput;
  fileIds: String[];
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type: ProjectType;
  repeatable: Boolean;
  question: String;
  classes: String[];
  width: Int;
  height: Int;
  expectedSubmissions?: Int;
}

export interface JobPromise extends Promise<Job>, Fragmentable {
  id: () => Promise<ID_Output>;
  projectId: () => Promise<String>;
  startDateTime: () => Promise<DateTimeOutput>;
  status: () => Promise<ProjectStatus>;
  endDateTime: () => Promise<DateTimeOutput>;
  fileIds: () => Promise<String[]>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  expectedSubmissions: () => Promise<Int>;
}

export interface JobSubscription
  extends Promise<AsyncIterator<Job>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectId: () => Promise<AsyncIterator<String>>;
  startDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  endDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  fileIds: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
  validation: () => Promise<AsyncIterator<Int>>;
  bucketName: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  repeatable: () => Promise<AsyncIterator<Boolean>>;
  question: () => Promise<AsyncIterator<String>>;
  classes: () => Promise<AsyncIterator<String[]>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  expectedSubmissions: () => Promise<AsyncIterator<Int>>;
}

export interface JobNullablePromise extends Promise<Job | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  projectId: () => Promise<String>;
  startDateTime: () => Promise<DateTimeOutput>;
  status: () => Promise<ProjectStatus>;
  endDateTime: () => Promise<DateTimeOutput>;
  fileIds: () => Promise<String[]>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  expectedSubmissions: () => Promise<Int>;
}

export interface JobConnection {
  pageInfo: PageInfo;
  edges: JobEdge[];
}

export interface JobConnectionPromise
  extends Promise<JobConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobEdge>>() => T;
  aggregate: <T = AggregateJobPromise>() => T;
}

export interface JobConnectionSubscription
  extends Promise<AsyncIterator<JobConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobSubscription>() => T;
}

export interface JobEdge {
  node: Job;
  cursor: String;
}

export interface JobEdgePromise extends Promise<JobEdge>, Fragmentable {
  node: <T = JobPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobEdgeSubscription
  extends Promise<AsyncIterator<JobEdge>>,
    Fragmentable {
  node: <T = JobSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJob {
  count: Int;
}

export interface AggregateJobPromise
  extends Promise<AggregateJob>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobSubscription
  extends Promise<AsyncIterator<AggregateJob>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Project {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type?: ProjectType;
  repeatable: Boolean;
  question?: String;
  classes: String[];
  width?: Int;
  height?: Int;
  status?: ProjectStatus;
  currentJobId?: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  status: () => Promise<ProjectStatus>;
  currentJobId: () => Promise<String>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  validation: () => Promise<AsyncIterator<Int>>;
  bucketName: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  repeatable: () => Promise<AsyncIterator<Boolean>>;
  question: () => Promise<AsyncIterator<String>>;
  classes: () => Promise<AsyncIterator<String[]>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  currentJobId: () => Promise<AsyncIterator<String>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  status: () => Promise<ProjectStatus>;
  currentJobId: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Task {
  id: ID_Output;
  jobId: String;
  userId: String;
  fileId: String;
  jobIdAndFileId: String;
  type?: ProjectType;
  labels?: Json;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<ID_Output>;
  jobId: () => Promise<String>;
  userId: () => Promise<String>;
  fileId: () => Promise<String>;
  jobIdAndFileId: () => Promise<String>;
  type: () => Promise<ProjectType>;
  labels: () => Promise<Json>;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  jobId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
  fileId: () => Promise<AsyncIterator<String>>;
  jobIdAndFileId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  labels: () => Promise<AsyncIterator<Json>>;
}

export interface TaskNullablePromise
  extends Promise<Task | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  jobId: () => Promise<String>;
  userId: () => Promise<String>;
  fileId: () => Promise<String>;
  jobIdAndFileId: () => Promise<String>;
  type: () => Promise<ProjectType>;
  labels: () => Promise<Json>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface JobSubscriptionPayload {
  mutation: MutationType;
  node: Job;
  updatedFields: String[];
  previousValues: JobPreviousValues;
}

export interface JobSubscriptionPayloadPromise
  extends Promise<JobSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobPreviousValuesPromise>() => T;
}

export interface JobSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobPreviousValuesSubscription>() => T;
}

export interface JobPreviousValues {
  id: ID_Output;
  projectId: String;
  startDateTime: DateTimeOutput;
  status?: ProjectStatus;
  endDateTime?: DateTimeOutput;
  fileIds: String[];
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type: ProjectType;
  repeatable: Boolean;
  question: String;
  classes: String[];
  width: Int;
  height: Int;
  expectedSubmissions?: Int;
}

export interface JobPreviousValuesPromise
  extends Promise<JobPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  projectId: () => Promise<String>;
  startDateTime: () => Promise<DateTimeOutput>;
  status: () => Promise<ProjectStatus>;
  endDateTime: () => Promise<DateTimeOutput>;
  fileIds: () => Promise<String[]>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  expectedSubmissions: () => Promise<Int>;
}

export interface JobPreviousValuesSubscription
  extends Promise<AsyncIterator<JobPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  projectId: () => Promise<AsyncIterator<String>>;
  startDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  endDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  fileIds: () => Promise<AsyncIterator<String[]>>;
  description: () => Promise<AsyncIterator<String>>;
  validation: () => Promise<AsyncIterator<Int>>;
  bucketName: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  repeatable: () => Promise<AsyncIterator<Boolean>>;
  question: () => Promise<AsyncIterator<String>>;
  classes: () => Promise<AsyncIterator<String[]>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  expectedSubmissions: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  validation: Int;
  bucketName: String;
  category: String;
  type?: ProjectType;
  repeatable: Boolean;
  question?: String;
  classes: String[];
  width?: Int;
  height?: Int;
  status?: ProjectStatus;
  currentJobId?: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  validation: () => Promise<Int>;
  bucketName: () => Promise<String>;
  category: () => Promise<String>;
  type: () => Promise<ProjectType>;
  repeatable: () => Promise<Boolean>;
  question: () => Promise<String>;
  classes: () => Promise<String[]>;
  width: () => Promise<Int>;
  height: () => Promise<Int>;
  status: () => Promise<ProjectStatus>;
  currentJobId: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  validation: () => Promise<AsyncIterator<Int>>;
  bucketName: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  repeatable: () => Promise<AsyncIterator<Boolean>>;
  question: () => Promise<AsyncIterator<String>>;
  classes: () => Promise<AsyncIterator<String[]>>;
  width: () => Promise<AsyncIterator<Int>>;
  height: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<ProjectStatus>>;
  currentJobId: () => Promise<AsyncIterator<String>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface TaskPreviousValues {
  id: ID_Output;
  jobId: String;
  userId: String;
  fileId: String;
  jobIdAndFileId: String;
  type?: ProjectType;
  labels?: Json;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  jobId: () => Promise<String>;
  userId: () => Promise<String>;
  fileId: () => Promise<String>;
  jobIdAndFileId: () => Promise<String>;
  type: () => Promise<ProjectType>;
  labels: () => Promise<Json>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  jobId: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
  fileId: () => Promise<AsyncIterator<String>>;
  jobIdAndFileId: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ProjectType>>;
  labels: () => Promise<AsyncIterator<Json>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Job",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  },
  {
    name: "ProjectType",
    embedded: false
  },
  {
    name: "ProjectStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
