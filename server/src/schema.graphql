type Query {
  projects: [Project!]!
  project(id: ID!): Project
  me: User

  getCategories: [Category]
  getJobs(projectId: ID!): [Job!]!
  getActiveJobs: [Job!]!
  getNextTask(jobId: String!): Task

  getTopContributors(projectId: String!, quantity: Int = 5): [Contributor]
}

type Mutation {
  initializeJob: Boolean
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createProject(input: ProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
  duplicateProject(id: ID!): Project!
  startProject(id: ID!): String!
  deleteProject(id: ID!): Project!

  saveCategory(category: String!): Category
  deleteCategory(id: String!): Category

  endJob(id: ID!): Job

  submitTask(input: TaskInput): Task
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  createdAt: String
  updatedAt: String
  name: String!
  description: String!
  validation: Int!
  bucketName: String!
  category: String!
  type: ProjectType!
  repeatable: Boolean
  question: String
  classes: [String!]
  width: Int
  height: Int
  creator: User!
  status: ProjectStatus
  currentJob: Job
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  DELETED
}

input ProjectInput {
  name: String!
  description: String!
  validation: Int!
  bucketName: String!
  category: String!
  type: ProjectType!
  repeatable: Boolean
  question: String
  classes: [String!]
  width: Int
  height: Int
}

input UpdateProjectInput {
  id: ID!
  description: String
  validation: Int
  bucketName: String
  category: String
  type: ProjectType
  repeatable: Boolean
  question: String
  classes: [String!]
  width: Int
  height: Int
  status: ProjectStatus
}

enum ProjectType {
  MULTI_CLASS
  BINARY
}

type Category {
  id: ID!
  name: String!
  createdAt: String
  updatedAt: String
}

type Job {
  id: String!
  projectId: String!
  startDateTime: String!
  endDateTime: String
  fileIds: [String]
  project: Project!
  description: String!
  validation: Int!
  bucketName: String!
  category: String!
  type: ProjectType!
  repeatable: Boolean!
  question: String!
  classes: [String!]!
  width: Int!
  height: Int!
  status: ProjectStatus
  taskCompleted: Int
}

type Task {
  id: String
  createdAt: String
  updatedAt: String
  jobId: String
  userId: String
  fileId: String
  type: ProjectType
  labels: [Label]
  job: Job!
}

type Label {
  id: String
  class: String
  vertices: [Vertex]
}

type Vertex {
  x: Int
  y: Int
}

input TaskInput {
  jobId: String
  fileId: String
  type: ProjectType
  labels: [LabelInput]
}

input LabelInput {
  id: String!
  class: String!
  vertices: [VertexInput]
}

input VertexInput {
  x: Int
  y: Int
}

type Contributor {
  userId: String!
  total: Int!
  user: User
}
