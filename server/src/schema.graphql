type Query {
  projects: [Project!]!
  project(id: ID!): Project
  me: User

  getCategories: [Category]
  getActiveJobs: [Job!]!
  getTask(jobId: String!): Task
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createProject(input: ProjectInput!): Project!
  startProject(id: ID!): String!
  deleteProject(id: ID!): Project!

  saveCategory(category: String!): Boolean

  endJob(id: ID!): Job

  submitTask(input: TaskInput): Task
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  projects: [Project!]!
}

type Project {
  id: ID!
  name: String!
  description: String!
  creator: User!
  status: ProjectStatus
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  DELETED
}

input ProjectInput {
  name: String!
  description: String!
  validation: Int!
  bucketUrl: String!
  category: String!
  type: ProjectType
  repeatable: Boolean
  question: String
  classes: [String!]
  width: Int
  height: Int
}

enum ProjectType {
  CLASS
  BINARY
}

type Category {
  name: String
}

type Job {
  id: String!
  projectId: String!
  startDateTime: String!
  endDateTime: String!
  fileUrls: [String]
}

type Task {
  id: String
  jobId: String
  userId: String
  fileUrl: String
  type: ProjectType
  answers: [Answer]
}

type Answer {
  id: String
  class: String
  vertices: [Vertex]
}

type Vertex {
  x: Int
  y: Int
}

input TaskInput {
  id: String
  jobId: String
  userId: String
  fileUrl: String
  answers: [AnswerInput!]!
}

input AnswerInput {
  id: String!
  class: String!
  vertices: [VertexInput]
}

input VertexInput {
  x: Int
  y: Int
}
