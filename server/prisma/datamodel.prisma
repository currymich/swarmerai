type User {
  id: ID! @id
  email: String! @unique
  password: String!
  name: String!
}

type Project {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  creator: User! @relation(link: INLINE)
  name: String!
  description: String!
  validation: Int!
  bucketUrl: String!
  category: String!
  type: ProjectType
  repeatable: Boolean! @default(value: false)
  question: String
  classes: [String]
  width: Int
  height: Int
  status: ProjectStatus @default(value: PENDING)
  currentJobId: String
}

type Category {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  name: String
}

type Job {
  id: ID! @id
  projectId: String!
<<<<<<< HEAD
  startDateTime: String!
  endDateTime: String
=======
  startDateTime: DateTime! @createdAt
  status: ProjectStatus @default(value: PENDING)
  endDateTime: DateTime
>>>>>>> Add babel config
  fileIds: [String]

  # redundantly store fields
  validation: Int!
}

type Task {
  id: ID! @id
  jobId: String
  userId: String
  fileId: String
  type: ProjectType
  labels: Json
}

enum ProjectType {
  MULTI_CLASS
  BINARY
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  DELETED
}
